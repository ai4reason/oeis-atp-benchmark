;; sequence(s): A145064
;; terms: 2 1 4 5 2 7 8 3 10 11 4 13 14 5 16 17 6 19 20 7
;; small program: (2 + x) div (1 + (((x * x) + x) mod (1 + 2)))
;; fast program: loop(x div (1 + 2), (x mod (1 + 2)) mod 2, 2 + x)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (div (+ 2 x) (+ 1 (mod (+ (* x x) x) (+ 1 2)))))))
(assert (forall ((x Int)) (= (f0 x) (div x (+ 1 2)))))
(assert (forall ((x Int)) (= (g0 x) (mod (mod x (+ 1 2)) 2))))
(assert (forall ((x Int)) (= (h0 x) (+ 2 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
