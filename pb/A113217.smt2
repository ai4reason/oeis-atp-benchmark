;; sequence(s): A113217
;; terms: 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 1
;; small program: (loop(x div (1 + 2), 2, 0 - x) mod (1 + x)) mod 2
;; fast program: (1 + ((0 - x) mod (1 + (2 * (2 + 2))))) mod (if x <= 0 then 1 else 2)
(set-logic UFNIA)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (div x (+ 1 2)))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (- 0 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (mod (mod (v0 x) (+ 1 x)) 2))))
(assert (forall ((x Int)) (= (fast x) (mod (+ 1 (mod (- 0 x) (+ 1 (* 2 (+ 2 2))))) (ite (<= x 0) 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
