;; sequence(s): A29579
;; terms: 1 1 2 3 3 5 4 7 5 9 6 11 7 13 8 15 9 17 10 19
;; small program: ((if (x mod 2) <= 0 then 2 else x) + x) div 2
;; fast program: loop(1 + (x div 2), 1 - (x mod 2), x)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (div (+ (ite (<= (mod x 2) 0) 2 x) x) 2))))
(assert (forall ((x Int)) (= (f0 x) (+ 1 (div x 2)))))
(assert (forall ((x Int)) (= (g0 x) (- 1 (mod x 2)))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
