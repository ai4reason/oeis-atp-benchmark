;; sequence(s): A111889
;; terms: 0 1 5 3 4 8 6 7 2 0 1 5 3 4 8 6 7 2 0 1
;; small program: loop((x mod (1 + (2 * (2 + 2)))) + y, x, x * x) - x
;; fast program: ((x * ((1 + 2) * (1 - x))) + x) mod (((2 + 2) * 2) + 1)
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (mod x (+ 1 (* 2 (+ 2 2)))) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) (* x x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (- (v0 x) x))))
(assert (forall ((x Int)) (= (fast x) (mod (+ (* x (* (+ 1 2) (- 1 x))) x) (+ (* (+ 2 2) 2) 1)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
