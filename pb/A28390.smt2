;; sequence(s): A28390
;; terms: 0 1 2 2 6 4 5 5 12 7 8 8 18 10 11 11 24 13 14 14
;; small program: ((if (x mod (2 + 2)) <= 0 then x else ((2 - x) div 2)) div 2) + x
;; fast program: (2 + loop(x + x, 1 - (x mod (2 + 2)), (x + x) + x)) div (2 + 2)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (div (ite (<= (mod x (+ 2 2)) 0) x (div (- 2 x) 2)) 2) x))))
(assert (forall ((x Int)) (= (f0 x) (+ x x))))
(assert (forall ((x Int)) (= (g0 x) (- 1 (mod x (+ 2 2))))))
(assert (forall ((x Int)) (= (h0 x) (+ (+ x x) x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (div (+ 2 (v0 x)) (+ 2 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
