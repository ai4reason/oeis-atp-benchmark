;; sequence(s): A118517
;; terms: 1 4 7 10 4 7 10 4 7 10 4 7 10 4 7 10 4 7 10 4
;; small program: 1 + ((1 + 2) * loop((x mod (1 + 2)) + 1, x, 0))
;; fast program: (((1 + ((2 + x) mod (1 + 2))) mod (1 + x)) * (1 + 2)) + 1
(set-logic UFNIA)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (mod x (+ 1 2)) 1))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ 1 (* (+ 1 2) (v0 x))))))
(assert (forall ((x Int)) (= (fast x) (+ (* (mod (+ 1 (mod (+ 2 x) (+ 1 2))) (+ 1 x)) (+ 1 2)) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
