;; sequence(s): A206904
;; terms: 2 5 9 11 14 18 21 23 27 30 33 36 39 42 45 48 51 55 57 60
;; small program: (((loop(((y * y) div (2 * (2 + x))) + y, 2 + (x + x), 0) * (1 + 2)) + 1) + x) div (1 + 2)
;; fast program: ((((((((2 - (((1 + x) div (2 + (2 * (2 + (2 + 2))))) + x)) div (2 + 2)) + 2) + x) + x) - x) + x) + ((1 + x) div (1 + 2))) + x
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (div (* y y) (* 2 (+ 2 x))) y))))
(assert (forall ((x Int)) (= (g0 x) (+ 2 (+ x x)))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (div (+ (+ (* (v0 x) (+ 1 2)) 1) x) (+ 1 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (+ (- (+ (+ (+ (div (- 2 (+ (div (+ 1 x) (+ 2 (* 2 (+ 2 (+ 2 2))))) x)) (+ 2 2)) 2) x) x) x) x) (div (+ 1 x) (+ 1 2))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
