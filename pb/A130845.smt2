;; sequence(s): A130845
;; terms: 0 0 0 1 1 1 1 3 2 2 2 5 3 3 3 7 4 4 4 9
;; small program: (x div 2) div (2 - (((x div 2) * x) mod 2))
;; fast program: x div (2 + loop(0, (x mod (2 + 2)) - 2, 2))
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (div (div x 2) (- 2 (mod (* (div x 2) x) 2))))))
(assert (= f0 0))
(assert (forall ((x Int)) (= (g0 x) (- (mod x (+ 2 2)) 2))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (fast x) (div x (+ 2 (v0 x))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
