;; sequence(s): A151842
;; terms: 0 1 1 1 3 2 2 5 3 3 7 4 4 9 5 5 11 6 6 13
;; small program: loop((y - x) div (if (y mod (1 + 2)) <= 0 then 2 else 1), x, 0)
;; fast program: ((((2 + x) * (x * x)) div (1 + 2)) * x) mod (1 + x)
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (div (- y x) (ite (<= (mod y (+ 1 2)) 0) 2 1)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (mod (* (div (* (+ 2 x) (* x x)) (+ 1 2)) x) (+ 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
