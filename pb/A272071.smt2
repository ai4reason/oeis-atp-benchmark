;; sequence(s): A272071
;; terms: 0 3 1 2 5 3 4 7 5 6 9 7 8 11 9 10 13 11 12 15
;; small program: loop(2 + (y - x), (x div (1 + 2)) + x, 0)
;; fast program: ((((x * x) + x) mod (1 + 2)) - ((1 + x) div (1 + 2))) + x
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 2 (- y x)))))
(assert (forall ((x Int)) (= (g0 x) (+ (div x (+ 1 2)) x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (- (mod (+ (* x x) x) (+ 1 2)) (div (+ 1 x) (+ 1 2))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
