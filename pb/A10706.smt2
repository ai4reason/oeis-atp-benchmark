;; sequence(s): A10706-A125025-A309345
;; terms: 3 8 3 8 3 8 3 8 3 8 3 8 3 8 3 8 3 8 3 8
;; small program: 2 + (if (x mod 2) <= 0 then 1 else (2 + (2 + 2)))
;; fast program: 2 + loop(2 + (2 + 2), x mod 2, 1)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ 2 (ite (<= (mod x 2) 0) 1 (+ 2 (+ 2 2)))))))
(assert (= f0 (+ 2 (+ 2 2))))
(assert (forall ((x Int)) (= (g0 x) (mod x 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (fast x) (+ 2 (v0 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
