;; sequence(s): A283971
;; terms: 0 1 1 3 4 5 3 7 8 9 5 11 12 13 7 15 16 17 9 19
;; small program: x div (if ((2 + x) mod (2 + 2)) <= 0 then 2 else 1)
;; fast program: loop(x div 2, 1 - ((2 + x) mod (2 + 2)), x)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (div x (ite (<= (mod (+ 2 x) (+ 2 2)) 0) 2 1)))))
(assert (forall ((x Int)) (= (f0 x) (div x 2))))
(assert (forall ((x Int)) (= (g0 x) (- 1 (mod (+ 2 x) (+ 2 2))))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
