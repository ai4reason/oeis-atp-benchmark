;; sequence(s): A312909
;; terms: 1 4 9 13 17 23 27 31 37 41 45 50 54 58 63 67 71 77 81 85
;; small program: (((((((loop((((if (((x * x) mod (1 + (2 + (2 + 2)))) - 2) <= 0 then 2 else x) mod 2) + 1) + x, x - 1, 2) - 1) + x) + x) + x) * (1 + 2)) + 1) + x) div (1 + 2)
;; fast program: ((((((((((((((((((((1 + ((((x div (2 + (2 + 2))) mod 2) + x) + x)) + x) div (2 + 2)) + (if x <= 0 then 1 else x)) + x) + x) * 2) + 1) + x) div (1 + 2)) + x) * (1 + 2)) + 1) + x) div (1 + 2)) + x) * (1 + 2)) + 1) + x) div (1 + 2)) - x
(set-logic UFNIA)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ (mod (ite (<= (- (mod (* x x) (+ 1 (+ 2 (+ 2 2)))) 2) 0) 2 x) 2) 1) x))))
(assert (forall ((x Int)) (= (g0 x) (- x 1))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (div (+ (+ (* (+ (+ (+ (- (v0 x) 1) x) x) x) (+ 1 2)) 1) x) (+ 1 2)))))
(assert (forall ((x Int)) (= (fast x) (- (div (+ (+ (* (+ (div (+ (+ (* (+ (div (+ (+ (* (+ (+ (+ (div (+ (+ 1 (+ (+ (mod (div x (+ 2 (+ 2 2))) 2) x) x)) x) (+ 2 2)) (ite (<= x 0) 1 x)) x) x) 2) 1) x) (+ 1 2)) x) (+ 1 2)) 1) x) (+ 1 2)) x) (+ 1 2)) 1) x) (+ 1 2)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
