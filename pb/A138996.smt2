;; sequence(s): A138996
;; terms: 1 1 1 7 2 2 2 12 3 3 3 17 4 4 4 22 5 5 5 27
;; small program: ((1 + loop(0, (1 + x) mod (2 + 2), 2 + 2)) * (2 + (x div 2))) div 2
;; fast program: ((loop((1 + (2 + 2)) * (2 + x), (x mod (2 + 2)) - 2, x) div 2) div 2) + 1
(set-logic UFNIA)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (= f0 0))
(assert (forall ((x Int)) (= (g0 x) (mod (+ 1 x) (+ 2 2)))))
(assert (= h0 (+ 2 2)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (div (* (+ 1 (v0 x)) (+ 2 (div x 2))) 2))))
(assert (forall ((x Int)) (= (f1 x) (* (+ 1 (+ 2 2)) (+ 2 x)))))
(assert (forall ((x Int)) (= (g1 x) (- (mod x (+ 2 2)) 2))))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (div (div (v1 x) 2) 2) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
