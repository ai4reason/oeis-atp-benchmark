;; sequence(s): A129202
;; terms: 1 2 3 8 25 6 49 32 27 50 121 24 169 98 75 128 289 54 361 200
;; small program: ((1 + ((2 + x) * x)) div (1 + (((x * x) - x) mod (1 + 2)))) div (1 + (x mod 2))
;; fast program: ((1 + loop(x div 2, x mod 2, x)) div loop(1 + 2, (x mod (1 + 2)) - 1, 1)) * (1 + x)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun f1 () Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (div (div (+ 1 (* (+ 2 x) x)) (+ 1 (mod (- (* x x) x) (+ 1 2)))) (+ 1 (mod x 2))))))
(assert (forall ((x Int)) (= (f0 x) (div x 2))))
(assert (forall ((x Int)) (= (g0 x) (mod x 2))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (= f1 (+ 1 2)))
(assert (forall ((x Int)) (= (g1 x) (- (mod x (+ 1 2)) 1))))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y f1))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (* (div (+ 1 (v0 x)) (v1 x)) (+ 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
